default:
  image: python:3.11

workflow:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" #run on mr
  - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS #don't run duplicate pipelines for MR
    when: never
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH #run on main
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS != "true" #don't run on push if no MR for this branch
    when: never
  - if: $CI_COMMIT_REF_PROTECTED #run on protected branches

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
  PRE_COMMIT_HOME: $CI_PROJECT_DIR/.cache/pre-commit

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.

stages:
- lint
- test
- deploy

cache:
  paths:
  - ${PIP_CACHE_DIR}
  - ${PRE_COMMIT_HOME}
  - venv/
  - docs/.jupyter_cache

### LINTING STAGE

before_script:
- python --version
- pip install virtualenv
- virtualenv venv
- source venv/bin/activate
- pip install .

pre-commit:
  stage: lint
  script:
  - pip install pre-commit
  - pre-commit run --all-files
  - pre-commit run --all-files --hook-stage pre-merge-commit
  cache:
    paths:
    - .cache/pre-commit

fixme:
  stage: lint
  script:
  - pip install flake8 flake8-fixme
  - flake8 --select T100,T101,T102 src/

### TESTING STAGE
tox_py311_w_cov:
  stage: test
  script:
  - pip install tox
  - tox -l
  - tox r -e py311-neuron8,coverage
  coverage: /(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
    - coverage_html_report/
  rules:
  - changes:
    - src/**/*
    - tests/**/*

tox_py310:
  script:
  - pip install tox
  - tox r -e py310-neuron8
  image: python:3.10
  rules:
  - changes:
    - src/**/*
    - tests/**/*

tox_py312:
  script:
  - pip install tox
  - tox r -e py312-neuron8
  image: python:3.12
  rules:
  - changes:
    - src/**/*
    - tests/**/*

tox_neuron9:
  script:
  - pip install tox
  - tox r -e py311-neuron9
  image: python:3.11
  rules:
  - changes:
    - src/**/*
    - tests/**/*

# Define the build_docs script as an anchor
.build_docs: &build_docs
- apt-get update && apt-get -y install libgl1
- pip install neuron
- pip install .[dev]
- pyfibers_compile
- pip install -Ur docs/rtd_requirements.txt
- apt-get install -y pandoc
- pip install --upgrade pip ipython ipykernel
- ipython kernel install --name "python3" --user
- sphinx-build -W -b html docs/source public

test_docs:
  stage: test
  script:
  - *build_docs
  rules:
  - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH

### DEPLOY STAGE

pages:
  stage: deploy
  script:
  - *build_docs
  artifacts:
    paths:
    - public
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

version_and_publish:
  stage: deploy
  variables:
    GIT_DEPTH: 0
    GIT_COMMIT_AUTHOR: semantic-release <$GITLAB_USER_EMAIL>
    TWINE_USERNAME: __token__
    TWINE_PASSWORD: $PYPI_TOKEN

  script:
  - git checkout "$CI_COMMIT_REF_NAME"
  - pip install python-semantic-release==9.*
  - pip install twine build
  - semantic-release version
  - git remote add github https://x-access-token:$GH_TOKEN@github.com/thedannymarsh/semantic_release_test.git
  - git push github -f --follow-tags

  rules:
    # Don't run on automatic commits
  - if: $CI_COMMIT_AUTHOR =~ /semantic-release.*/
    when: never
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    when: always

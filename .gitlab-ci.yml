# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/

default:
  image: python:3.10

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_REF_PROTECTED

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.

stages: # List of stages for jobs, and their order of execution
  - lint
  - test
  - deploy

cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - python --version # For debugging
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate

isort:
  stage: lint
  script:
    - pip install isort
    - isort --check-only src

black:
  stage: lint
  script:
    - pip install black black[jupyter]
    - black --check src

flake8:
  stage: lint
  script:
    - pip install flake8==5.* flake8-eradicate flake8-simplify flake8-bugbear flake8-builtins flake8-comprehensions flake8-blind-except flake8-use-fstring
    - flake8 --extend-ignore=T100,T101,T102 src

docstring_check:
  stage: lint
  script:
    - pip install flake8==5.* flake8-docstrings flake8-rst-docstrings darglint
    - flake8 --select=D,DAR,RST src
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

#Here should check that no DevelopmentError is thrown in repo
#dev_check:
#  stage: lint
#  script:
#    - ( ! grep "raise DevelopmentError" --include \*.py -r . )
#    - pip install flake8 flake8-fixme
#    - flake8 --select=T100,T101,T102 src
#  rules:
#    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

#NOTE: will need to add building python package to this

# Run tests
pytest:
  stage: test
  script:
    - pip install -r requirements.txt
    - pip install pytest pytest-cov
    - pip install .
    - wmglab_neuron_install
    - export PYTHONPATH=$HOME/local/lib/python
    - apt-get update && apt-get -y install libgl1
    - pytest --cov=src/ tests/
    - coverage xml

test_docs:
  stage: test
  script:
    - pip install -U sphinx mock sphinx-rtd-theme
    - pip install -Ur docs/rtd_requirements.txt
    - apt-get update
    - apt-get install -y pandoc
    - pip install -r requirements.txt
    - pip install .
    - pip install --upgrade pip ipython ipykernel
    - ipython kernel install --name "python3" --user
    - wmglab_neuron_install
    - export PYTHONPATH=$HOME/local/lib/python
    - apt-get update && apt-get -y install libgl1
    - cd docs/source; sphinx-build -W -b html . ../../public
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH

pages:
  stage: deploy
  script:
    - pip install -U sphinx mock sphinx-rtd-theme
    - pip install -Ur docs/rtd_requirements.txt
    - apt-get update
    - apt-get install -y pandoc
    - pip install -r requirements.txt
    - pip install .
    - pip install --upgrade pip ipython ipykernel
    - ipython kernel install --name "python3" --user
    - wmglab_neuron_install
    - export PYTHONPATH=$HOME/local/lib/python
    - apt-get update && apt-get -y install libgl1
    - cd docs/source; sphinx-build -W -b html . ../../public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

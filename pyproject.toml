[build-system]
build-backend = "flit_core.buildapi"
requires = ["flit_core>=3.4"]

[project]
authors = [
  {name = "Daniel Marshall"},
  {name = "Elie Farah"},
  {name = "Eric Musselman"},
  {name = "Nicole Pelot"},
  {name = "Warren Grill"}
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Operating System :: OS Independent"
]
dependencies = [
  "matplotlib==3.10.*",
  "multiprocess==0.*",
  # "neuron",
  "numpy==2.2.*",
  "pandas==2.2.*",
  "scipy==1.15.*",
  "seaborn==0.13.*",
  "nd_line==0.2.*",
  "aenum==3.1.*"
]
description = "Modeling stimulation of peripheral nerve fibers"
keywords = [
  "stimulation",
  "modeling",
  "computational",
  "fibers",
  "peripheral nerve"
]
license = {file = "LICENSE"}
name = "pyfibers"
readme = "README.md"
requires-python = ">=3.10"
version = "0.6.2"  # This is the only place version should be hard coded

[project.optional-dependencies]
dev = [
  "mock==5.*",
  "pre-commit==4.0.*",
  "pytest==8.*",
  "pytest-cov==6.*",
  "pytest-sugar==1.*",
  "sphinx==7.*",
  "sphinx-rtd-theme==3.*",
  "sphinx-copybutton==0.5.*",
  "IPython==8.*",
  "enum-tools[sphinx]==0.12.*",
  "sphinxcontrib-bibtex==2.6.*",
  "moviepy==2.1.*",
  "sphinx_autodoc_typehints==2.3.*",
  "piccolo-theme==0.24.*",
  "myst-nb==1.2.*"
]

[project.scripts]
pyfibers_compile = "pyfibers.compile:main"

[project.urls]
Changelog = "https://github.com/wmglab-duke/pyfibers/blob/main/CHANGELOG.md"
Documentation = "https://wmglab-duke.github.io/pyfibers/"
Homepage = "https://github.com/wmglab-duke/pyfibers"
Issues = "https://github.com/wmglab-duke/pyfibers/issues"
Repository = "https://github.com/wmglab-duke/pyfibers"

[tool.black]
line-length = 120
skip-string-normalization = true

[tool.coverage.html]
directory = "coverage_html_report"

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
  # Don't complain about missing debug-only code:
  "def __repr__",
  "def __str__",
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",
  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:"
]
ignore_errors = true

# coverage controls
[tool.coverage.run]
branch = true
parallel = true
source = ["pyfibers"]

[tool.docformatter]
in-place = true
wrap-descriptions = 0
wrap-summaries = 0

[tool.flake8]
docstring-style = "SPHINX"
ignore = [
  "E203",  # Black compatibility
  "W503",  # Black compatibility
  "ANN002",  # Suppress annotations for *args/**kwargs (eventually consider removing)
  "ANN003",  # Suppress annotations for *args/**kwargs (eventually consider removing)
  "I900",  # Temporary suppression of dependency check (NEURON Windows 8.2.4+)
  "DAR501"  # Disabling darglint complaint about ivar documentation
]
max-complexity = 18
max-line-length = 120
per-file-ignores = """
        __init__.py: F4
        docs/source/conf.py: E800
        src/*.py: PT
        tests/*.py: D,E800,ANN
        example*.py: E800
        """
rst-directives = ["seealso"]
rst-roles = ["doc", "meth", "class", "func", "attr"]

[tool.flynt]
line-length = 120

[tool.isort]
add_imports = ["from __future__ import annotations"]
append_only = true
ensure_newline_before_comments = true
float_to_top = true
force_grid_wrap = 0
include_trailing_comma = true
line_length = 120
multi_line_output = 3
use_parentheses = true

[tool.mypy]
allow_redefinition = true
# exclude docs directory
exclude = ["docs", "tests"]
explicit_package_bases = true
ignore_missing_imports = true
implicit_optional = true
no_strict_optional = true

[tool.rstcheck]
ignore_directives = [
  "automodule",
  "bibliography",
  "include",
  "autoclass",
  "attr",
  "seealso"
]

[tool.semantic_release]
branch = "main"
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
commit_parser_options = {parse_squash_commits = true, ignore_merge_commits = true}
major_on_zero = false  # set to true once we reach 1.0.0
no_git_verify = true
tag_format = "v{version}"
upload_to_PyPI = true  # set to true once package is set up on PyPI
upload_to_release = true  # set to true if we want to enable releases
version_toml = [
  "pyproject.toml:project.version"
]
version_variable = [
  "docs/source/conf.py:release:nf"
]

[tool.semantic_release.changelog]
exclude_commit_patterns = [
  '''chore(?:\([^)]*?\))?: .+''',
  '''ci(?:\([^)]*?\))?: .+''',
  '''refactor(?:\([^)]*?\))?: .+''',
  '''style(?:\([^)]*?\))?: .+''',
  '''test(?:\([^)]*?\))?: .+''',
  '''build\((?!deps\): .+)'''
]
mode = "update"

[tool.semantic_release.remote]
type = "gitlab"
